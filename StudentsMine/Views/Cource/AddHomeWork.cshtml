@model StudentsMine.Models.HomeWork

@{
    ViewBag.Title = "AddHomeWork";
}
<script src="/Scripts/duplicator.js"> </script>
<script src="/Scripts/inputSerializer.js"> </script>
<script>
    var data_field = new Duplicator("dublicate-data-group", "data-field", "formClick");
    function rebuildFiles() {
        var fileInputs = $('input[type=file]')
        fileInputs.each(function (index, node) {
            if (node.files[0] != undefined) {
                var name = document.createElement('input');
                var dataBase64 = document.createElement('input');
                var format = document.createElement('input');
                var reader = new FileReader();
                reader.readAsDataURL(node.files[0])
                reader.onload = function () {
                    name.value = node.files[0].name;
                    dataBase64.value = reader.result;
                    format.value = node.files[0].type;
                }
                name.setAttribute('class',  'data');
                dataBase64.setAttribute('class', 'data');
                format.setAttribute('class', 'data');

                name.setAttribute('name', node.name + '%Name');
                dataBase64.setAttribute('name', node.name + '%DataBase64');
                format.setAttribute('name', node.name + '%Format');
                name.hidden = true;
                dataBase64.hidden = true;
                format.hidden = true;
                node.appendChild(name);
                node.appendChild(dataBase64);
                node.appendChild(format);
            }
        })
    }
    var json;
    function sendAction() {
        //rebuild();
        //rebuildFiles();
        $.when(rebuild(), rebuildFiles()).done(function () { 
            json = test();
        })
    }

</script>
@using (Html.BeginForm("AddHomeWork", "Cource", new { courseId = ViewBag.CourceId }, FormMethod.Post, new { id = "form" }))
{
    

    <div class="form-horizontal">
        <h4>HomeWork</h4>
        <hr />
        @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="text" class="data" name="Title" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="text" class="data" name="Description" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HasCondition, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="checkbox" class="data"  name="HasCondition" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Attachments, new { @class = "control-label col-md-2" })
            <div class="col-md-10 dublicate-data-group" index="0">
                <input type="file" name="[0].Attachments" class="data-field" />
            </div>
        </div>


        <div id="condition">
            <h2>Condition</h2>
            <div class="form-group">
                @Html.LabelFor(model => model.Condition.Until, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="text" class="data" name="Condition%Until" />
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Condition.IsBlocked, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="text" class="data" name="Condition%IsBlocked" />
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Condition.HasRequiredFormat, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="checkbox" class="data" name="Condition%HasRequiredFormat" />
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Condition.RequiredFormat, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="text" class="data" name="Condition%RequiredFormat" />
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <a href="#" onclick="sendAction(); return false;" id="formClick">AAAAAAAAA</a>
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<form id="form1"></form>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
